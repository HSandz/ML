import copy, math
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('./data/deeplearning.mplstyle')
np.set_printoptions(precision = 2)

def predict(x, w, b):
    return np.dot(x, w) + b

def compute_cost(X, y, w, b):
    m = X.shape[0]
    f_wb = np.dot(X, w) + b
    J_wb = (1 / (2 * m)) * np.sum((f_wb - y) ** 2)
    return J_wb

def compute_gradient(X, y, w, b):
    m = X.shape[0]
    f_wb = np.dot(X, w) + b
    dj_dw = (1 / m) * np.dot(f_wb - y, X)
    dj_db = (1 / m) * np.sum(f_wb - y)
    return dj_dw, dj_db

def gradient_descent(X, y, w_in, b_in, cost_function, gradient_function, alpha, num_iters):
    J_history = []
    w = copy.deepcopy(w_in)
    b = b_in

    for i in range(num_iters):

        dj_dw, dj_db = gradient_function(X, y, w, b)

        w = w - alpha * dj_dw
        b = b - alpha * dj_db

        if i < 100000:
            J_history.append(cost_function(X, y, w, b))

        if i % math.ceil(num_iters / 10) == 0:
            print(f"Iteration {i:4d}: Cost {J_history[-1]:8.2f}   ")

    return w, b, J_history

# Data
X_train = np.array([[2104, 5, 1, 45], [1416, 3, 2, 40], [852, 2, 1, 35]])
y_train = np.array([460, 232, 178])
b_init = 785.1811367994083
w_init = np.array([ 0.39133535, 18.75376741, -53.36032453, -26.42131618])

f_wb = np.dot(X_train, w_init) + b_init

# print(compute_gradient(X_train, y_train, w_init, b_init))

# # Printing the data
# print(f"X Shape: {X_train.shape}")
# print(X_train)
# print(f"y Shape: {y_train.shape}")
# print(y_train)
# print(f"w Shape: {w_init.shape}")
# print(w_init)

# Test
initial_w = np.zeros_like(w_init)
initial_b = 0.

iterations = 1000
alpha = 5.0e-7

w_final, b_final, J_hist = gradient_descent(X_train, y_train, initial_w, initial_b,
                                                    compute_cost, compute_gradient, 
                                                    alpha, iterations)
print(f"b,w found by gradient descent: {b_final:0.2f},{w_final} ")
m,_ = X_train.shape
for i in range(m):
    print(f"prediction: {np.dot(X_train[i], w_final) + b_final:0.2f}, target value: {y_train[i]}")